# ---------------------------------
# Finds OpenGL
# Adds library to target
# Adds include path
# ---------------------------------

SET(foundIncludeDir 1)

#GL is natively installed on our Linux pc's and comes with the installation of visual studio. In that case however, one has to make sure the SDK is in the INCLUDE environment variable
IF(WIN32)
	FIND_PATH(PATH_GL GL\\gl.h)
ELSE(WIN32)
	FIND_PATH(PATH_GL GL/gl.h)
ENDIF(WIN32)
IF(PATH_GL)
	MESSAGE(STATUS "  Found OpenGL in ${PATH_GL}" )
	INCLUDE_DIRECTORIES(${PATH_GL})
ELSE(PATH_GL)
	SET(foundIncludeDir 0)
ENDIF(PATH_GL)

FIND_PATH(PATH_FreeType include/ft2build.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/FreeType ${OV_CUSTOM_DEPENDENCIES_PATH}/include/FreeType/ )# NO_DEFAULT_PATH NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH)
IF(PATH_FreeType)
	MESSAGE(STATUS "  Found FreeType in ${PATH_FreeType}" )
	IF(WIN32)
		INCLUDE_DIRECTORIES(${PATH_FreeType}/include)
	ELSE(WIN32)
		INCLUDE_DIRECTORIES(${PATH_FreeType}/include/freetype2)
	ENDIF(WIN32)
ELSE(PATH_FreeType)
	SET(foundIncludeDir 0)
ENDIF(PATH_FreeType)

#needs to be installed on both platforms (headers not present on our Linux box), headers should be installed in ${OV_CUSTOM_DEPENDENCIES_PATH}/FTGL/include
#FIND_PATH(PATH_FTGL include/FTGL/ftgl.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/FTGL ${OV_CUSTOM_DEPENDENCIES_PATH}/include/FTGL ${OV_CUSTOM_DEPENDENCIES_PATH})
#IF(PATH_FTGL)
#	MESSAGE(STATUS "  Found FTGL in ${PATH_FTGL}" )
#	INCLUDE_DIRECTORIES(${PATH_FTGL}/include)
#ELSE(PATH_FTGL)
#	SET(foundIncludeDir 0)
#ENDIF(PATH_FTGL)

#FIND_PATH(PATH_GLFW include/GLFW/glfw3.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/GLFW ${OV_CUSTOM_DEPENDENCIES_PATH}/include/GLFW ${OV_CUSTOM_DEPENDENCIES_PATH})
#IF(PATH_GLFW)
	#MESSAGE(STATUS "  Found GLFW in ${PATH_GLFW}" )
	#INCLUDE_DIRECTORIES(${PATH_GLFW}/include)
#ELSE(PATH_GLFW)
#	SET(foundIncludeDir 0)
#ENDIF(PATH_GLFW)

INCLUDE("FindThirdPartyPkgConfig")
pkg_search_module(GLFW REQUIRED glfw3)
MESSAGE(STATUS "  Found glfw in ${PATH_GLFW}" )
include_directories(${GLFW_INCLUDE_DIRS})
MESSAGE("libs are " ${GLFW_LIBRARIES} )

#natively installed on our Linux pc's, but should be installed on our Windows pc separately. Headers should be in $ENV{OV_DEP_ExternalStimulator}/SDL/include
#IF(WIN32)
#	FIND_PATH(PATH_SDL include/SDL.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/SDL ${OV_CUSTOM_DEPENDENCIES_PATH}/include/SDL)
#	IF(PATH_SDL)
#		MESSAGE(STATUS "  Found SDL in ${PATH_SDL}" )
#		INCLUDE_DIRECTORIES(${PATH_SDL}/include)
#	ELSE(PATH_SDL)
#		SET(foundIncludeDir 0)
#	ENDIF(PATH_SDL)
#ELSE(WIN32)
#	FIND_PATH(PATH_SDL SDL/SDL.h)
#	IF(PATH_SDL)
#		MESSAGE(STATUS "  Found SDL in ${PATH_SDL}" )
#		INCLUDE_DIRECTORIES(${PATH_SDL}/SDL)
#	ELSE(PATH_SDL)
#		SET(foundIncludeDir 0)
#	ENDIF(PATH_SDL)
#ENDIF(WIN32)

#include windows library inpout32 for writing to parallel port
IF(WIN32)
	FIND_PATH(INPOUT32 include/inpout32.h ${OV_CUSTOM_DEPENDENCIES_PATH}/inpout32/)
	IF(INPOUT32)
		MESSAGE(STATUS " Found inpout32 in ${INPOUT32}")
		INCLUDE_DIRECTORIES(${INPOUT32}/include)
	ELSE(INPOUT32)
		SET(foundIncludeDir 0)
	ENDIF(INPOUT32)
ENDIF(WIN32)

FIND_PATH(PATH_PRESAGE presage.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/include/ ${OV_CUSTOM_DEPENDENCIES_PATH}/include/presage/ ${OV_CUSTOM_DEPENDENCIES_PATH}/presage/include)
IF(PATH_PRESAGE)
	MESSAGE(STATUS "  Found Presage in ${PATH_PRESAGE}")
	INCLUDE_DIRECTORIES(${PATH_PRESAGE})
	SET(name_libpresage presage)
	ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyPresage)
ELSE(PATH_PRESAGE)
	MESSAGE(STATUS "  FAILED to find Presage")
ENDIF(PATH_PRESAGE)

IF(foundIncludeDir)
	IF(WIN32)
				FIND_LIBRARY(LIB_GL OpenGL32)
		#FIND_LIBRARY(LIB_glut glut32)
		#FIND_LIBRARY(LIB_SDL SDL PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/SDL/lib)
		#FIND_LIBRARY(LIB_SDLmain SDLmain PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/SDL/lib )
		FIND_LIBRARY(LIB_GLFW glfw PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/GLFW/lib)
		#FIND_LIBRARY(LIB_SDL_image SDL_image PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/SDL/lib)
		FIND_LIBRARY(LIB_presage libpresage-1 PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/presage/lib)
		#IF(LIB_GL AND LIB_GLFW AND LIB_SDL AND LIB_SDLmain AND LIB_SDL_image)
		#	MESSAGE(STATUS "    [  OK  ] lib ${LIB_GL}, ${LIB_GLFW}, ${LIB_SDL}, ${LIB_SDLmain}, ${LIB_SDL_image}")
		#	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_GL} ${LIB_GLFW} ${LIB_SDL} ${LIB_SDLmain} ${LIB_SDL_image})
		#ELSE(LIB_GL AND LIB_GLFW AND LIB_SDL AND LIB_SDLmain AND LIB_SDL_image)
		#	MESSAGE(STATUS "    [FAILED] lib GL GLFW SDL")
		#ENDIF(LIB_GL AND LIB_GLFW AND LIB_SDL AND LIB_SDLmain AND LIB_SDL_image)
		IF(LIB_presage)
			MESSAGE(STATUS "    [  OK  ] lib  ${LIB_presage}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_presage})
		ELSE( LIB_presage)
			MESSAGE(STATUS "    [FAILED] lib presage")
		ENDIF(LIB_presage)

		#inpout32.lib
		FIND_LIBRARY(LIB_INPOUT32 NAMES "inpout32.lib" PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/inpout32/lib/)
		IF(LIB_INPOUT32)
			MESSAGE(STATUS "    [  OK  ] lib ${LIB_INPOUT32}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_INPOUT32} )
		ELSE(LIB_INPOUT32)
			MESSAGE(STATUS "    [FAILED] lib inpout32")
		ENDIF(LIB_INPOUT32)	
	ELSE(WIN32)
		FIND_LIBRARY(LIB_GL GL)
		FIND_LIBRARY(LIB_GLU GLU)
		#FIND_LIBRARY(LIB_glut glut)
		#FIND_LIBRARY(LIB_SDL_image libSDL_image-1.2.so.0)#SDL_image)
		#FIND_LIBRARY(LIB_SDL SDL)
		#FIND_LIBRARY(LIB_GLFW NAMES libglfw3.so PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/lib/)
		FOREACH(GLFW_LIB ${GLFW_LIBRARIES})
			SET(GLFW_LIB1 "GLFW_LIB1-NOTFOUND")
			FIND_LIBRARY(GLFW_LIB1 NAMES ${GLFW_LIB} PATHS ${GLFW_LIBRARY_DIRS} ${GLFW_LIBDIR} NO_DEFAULT_PATH)
			FIND_LIBRARY(GLFW_LIB1 NAMES ${GLFW_LIB} PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/lib/)
			FIND_LIBRARY(GLFW_LIB1 NAMES ${GLFW_LIB})
			IF(GLFW_LIB1)
				MESSAGE(STATUS "    [  OK  ] Third party lib ${GLFW_LIB1}")
				TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GLFW_LIB1})
			ELSE(GLFW_LIB1)
				MESSAGE(STATUS "    [FAILED] Third party lib ${GLFW_LIB}")
			ENDIF(GLFW_LIB1)
		ENDFOREACH(GLFW_LIB)	
		FIND_LIBRARY(LIB_PRESAGE ${name_libpresage} PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/lib/)
		IF(LIB_GL)
			MESSAGE("GL OK")
		ELSE(LIB_GL)
			MESSAGE("GL NOT OK")
		ENDIF(LIB_GL) 

		IF(LIB_GLU)
			MESSAGE("GLU OK")
		ELSE(LIB_GUL)
			MESSAGE("GLU NOT OK")
		ENDIF(LIB_GLU)

		#IF(LIB_GLFW)
		#	MESSAGE("GLFW OK")
		#ELSE(LIB_GLFW)
		#	MESSAGE("GLFW NOT OK")
		#ENDIF(LIB_GLFW)

		#IF(LIB_SDL)
		#	MESSAGE("SDL OK")
		#ELSE(LIB_SDL)
		#	MESSAGE("SDL NOT OK")
		#ENDIF(LIB_SDL)  

		IF(LIB_PRESAGE)
			MESSAGE("PRESAGE OK")
		ELSE(LIB_PRESAGE)
			MESSAGE("PRESAGE NOT OK")
		ENDIF(LIB_PRESAGE) 
 
		IF(LIB_GL AND LIB_GLU AND LIB_PRESAGE)
			MESSAGE(STATUS "    [  OK  ] lib ${LIB_GL}, ${LIB_GLU} and ${LIB_PRESAGE}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIB_GL} ${LIB_GLU} ${LIB_PRESAGE})
		ELSE(LIB_GL AND LIB_GLU AND LIB_PRESAGE)
			MESSAGE(STATUS "    [FAILED] lib GL GLU presage")
		ENDIF(LIB_GL AND LIB_GLU AND LIB_PRESAGE)

		#pthread and rt seemed to be necessary on linux when using boost interprocess communication
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread rt)	
	ENDIF(WIN32)

	ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyModulesForExternalStimulator -D_GNU_SOURCE=1 -D_REENTRANT)
ENDIF(foundIncludeDir)


