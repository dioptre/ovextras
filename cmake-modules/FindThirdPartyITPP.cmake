# ---------------------------------
# Finds ITPP toolkit
#
# Sets ITPP_FOUND
# Sets ITPP_LIBRARIES
# Sets ITPP_LIBRARY_DIRS
# Sets ITPP_LDFLAGS
# Sets ITPP_LDFLAGS_OTHERS
# Sets ITPP_INCLUDE_DIRS
# Sets ITPP_CFLAGS
# Sets ITPP_CFLAGS_OTHERS
#
# Adds library to target
# Adds include path
# ---------------------------------

IF(WIN32)
	FIND_PATH(PATH_ITPP include/itpp/itbase.h PATHS ${OV_CUSTOM_DEPENDENCIES_PATH}/itpp)
	IF(PATH_ITPP)
		SET(ITPP_FOUND TRUE)
		SET(ITPP_INCLUDE_DIRS ${PATH_ITPP}/include)
		
		# Currently the different versions we package for different VS have a bit different lib names...
		IF(${CMAKE_MAJOR_VERSION} LESS 3)
			INCLUDE(CMakeDetermineVSServicePack)
			DetermineVSServicePack( MSVC_SERVICE_PACK )
		ELSE(${CMAKE_MAJOR_VERSION} LESS 3)
			SET(MSVC_SERVICE_PACK "unknown")
			IF(${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "16.0.0")
				SET(MSVC_SERVICE_PACK "vc100")
			ENDIF()			
			IF(${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "17.0.0")
				SET(MSVC_SERVICE_PACK "vc110")
			ENDIF()		
			IF(${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "18.0.0")
				SET(MSVC_SERVICE_PACK "vc120")
			ENDIF()
		ENDIF(${CMAKE_MAJOR_VERSION} LESS 3)
		
		STRING(REGEX MATCH "vc100.*" MSVC_VER100 ${MSVC_SERVICE_PACK})
		STRING(REGEX MATCH "vc120.*" MSVC_VER120 ${MSVC_SERVICE_PACK})
	
		IF(MSVC_VER100) 
			SET(ITPP_LIBRARIES libblas.a libfftw3-3 liblapack.a libgcc.a libg2c.a)	
			SET(ITPP_LIBRARIES_RELEASE itpp)
			SET(ITPP_LIBRARIES_DEBUG itppd)
		ENDIF(MSVC_VER100)	
		IF(MSVC_VER120) 
			SET(ITPP_LIBRARIES libfftw3-3_win32)
			SET(ITPP_LIBRARIES_RELEASE blas_win32_MT lapack_win32_MT itpp)
			SET(ITPP_LIBRARIES_DEBUG blas_win32_MTd lapack_win32_MTd itppd)			
		ENDIF(MSVC_VER120)	
		
		SET(ITPP_LIBRARY_DIRS ${PATH_ITPP}/lib )
	ENDIF(PATH_ITPP)
	
ENDIF(WIN32)

IF(UNIX)
	INCLUDE("FindThirdPartyPkgConfig")
	pkg_check_modules(ITPP itpp)
ENDIF(UNIX)

IF(ITPP_FOUND)
	MESSAGE(STATUS "  Found it++...")
	SET(ITPP_LOADING_FAILURE FALSE)
	INCLUDE_DIRECTORIES(${ITPP_INCLUDE_DIRS})
	ADD_DEFINITIONS(${ITPP_CFLAGS})
	ADD_DEFINITIONS(${ITPP_CFLAGS_OTHERS})
	# LINK_DIRECTORIES(${ITPP_LIBRARY_DIRS})
	FOREACH(ITPP_LIB ${ITPP_LIBRARIES})
		SET(ITPP_LIB1 "ITPP_LIB1-NOTFOUND")
		FIND_LIBRARY(ITPP_LIB1 NAMES ${ITPP_LIB} PATHS ${ITPP_LIBRARY_DIRS} ${ITPP_LIBDIR} NO_DEFAULT_PATH)
		IF(ITPP_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${ITPP_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${ITPP_LIB1})
		ELSE(ITPP_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${ITPP_LIB1}")
			SET(ITPP_LOADING_FAILURE TRUE)
		ENDIF(ITPP_LIB1)	
	ENDFOREACH(ITPP_LIB)
	FOREACH(ITPP_LIB ${ITPP_LIBRARIES_RELEASE})
		SET(ITPP_LIB1 "ITPP_LIB1-RELEASE-NOTFOUND")
		FIND_LIBRARY(ITPP_LIB1 NAMES ${ITPP_LIB} PATHS ${ITPP_LIBRARY_DIRS} ${ITPP_LIBDIR} NO_DEFAULT_PATH)
		IF(ITPP_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${ITPP_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} optimized ${ITPP_LIB1})
		ELSE(ITPP_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${ITPP_LIB1}")
			SET(ITPP_LOADING_FAILURE TRUE)
		ENDIF(ITPP_LIB1)	
	ENDFOREACH(ITPP_LIB)
	FOREACH(ITPP_LIB ${ITPP_LIBRARIES_DEBUG})
		SET(ITPP_LIB1 "ITPP_LIB1-DEBUG-NOTFOUND")
		FIND_LIBRARY(ITPP_LIB1 NAMES ${ITPP_LIB} PATHS ${ITPP_LIBRARY_DIRS} ${ITPP_LIBDIR} NO_DEFAULT_PATH)
		IF(ITPP_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${ITPP_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME} debug ${ITPP_LIB1})
		ELSE(ITPP_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${ITPP_LIB1}")
			SET(ITPP_LOADING_FAILURE TRUE)
		ENDIF(ITPP_LIB1)	
	ENDFOREACH(ITPP_LIB)	
	
	#We declare itpp has add only if all loading work
	IF(NOT ITPP_LOADING_FAILURE)
		ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyITPP)
	ENDIF(NOT ITPP_LOADING_FAILURE)
	
ELSE(ITPP_FOUND)
	MESSAGE(STATUS "  FAILED to find it++...")
ENDIF(ITPP_FOUND)
